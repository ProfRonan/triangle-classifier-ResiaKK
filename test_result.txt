============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Triangle Classifier-04-24-2023-04-46-29/ResiaKK
collected 12 items

test_main.py .........FFF                                                [100%]

=================================== FAILURES ===================================
_____________________ test_não_é_um_triângulo[test_input0] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6791926260>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'Não é um triangulo'
E        +  where 'Não é um triangulo' = <built-in method strip of str object at 0x7f6791ad3810>()
E        +    where <built-in method strip of str object at 0x7f6791ad3810> = 'Não é um triangulo\n'.strip
E        +      where 'Não é um triangulo\n' = <built-in method getvalue of _io.StringIO object at 0x7f6791959cf0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f6791959cf0> = <_io.StringIO object at 0x7f6791959cf0>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input1] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f67919177c0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'Não é um triangulo'
E        +  where 'Não é um triangulo' = <built-in method strip of str object at 0x7f6791950570>()
E        +    where <built-in method strip of str object at 0x7f6791950570> = 'Não é um triangulo\n'.strip
E        +      where 'Não é um triangulo\n' = <built-in method getvalue of _io.StringIO object at 0x7f679195a9e0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f679195a9e0> = <_io.StringIO object at 0x7f679195a9e0>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input2] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6791ae3220>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'Não é um triangulo'
E        +  where 'Não é um triangulo' = <built-in method strip of str object at 0x7f6791952b50>()
E        +    where <built-in method strip of str object at 0x7f6791952b50> = 'Não é um triangulo\n'.strip
E        +      where 'Não é um triangulo\n' = <built-in method getvalue of _io.StringIO object at 0x7f679195ab90>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7f679195ab90> = <_io.StringIO object at 0x7f679195ab90>.getvalue

test_main.py:104: AssertionError
=========================== short test summary info ============================
FAILED test_main.py::test_não_é_um_triângulo[test_input0] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input1] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input2] - AssertionError: a...
========================= 3 failed, 9 passed in 0.06s ==========================
